/*
    ⚠️ AUTOMATICALLY GENERATED CODE
 
    Generated by Sources/Generator/main.swift.
    Do not edit this file directly.
 
    Last generated: 2016-06-19 22:56:09 +0000
*/
extension RouteBuilder {
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/
    */
    public func socket(_ p0: String = "", handler: (HTTPRequest, WebSocket) throws -> ()) {
        self.add(.get, path: "\(p0)") { request in 
            return try request.upgradeToWebSocket { try handler(request, $0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/
    */
    public func get(_ p0: String = "", handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/
    */
    public func post(_ p0: String = "", handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/
    */
    public func put(_ p0: String = "", handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/
    */
    public func patch(_ p0: String = "", handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/
    */
    public func delete(_ p0: String = "", handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/
    */
    public func options(_ p0: String = "", handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)") { request in 
            return try handler(request)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/
    */
    public func socket<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/
    */
    public func get<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/
    */
    public func post<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/
    */
    public func put<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/
    */
    public func patch<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/
    */
    public func delete<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/
    */
    public func options<W0: StringInitializable>(_ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/
    */
    public func socket(_ p0: String, _ p1: String, handler: (HTTPRequest, WebSocket) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)") { request in 
            return try request.upgradeToWebSocket { try handler(request, $0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/
    */
    public func get(_ p0: String, _ p1: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/
    */
    public func post(_ p0: String, _ p1: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/
    */
    public func put(_ p0: String, _ p1: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/
    */
    public func patch(_ p0: String, _ p1: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/
    */
    public func delete(_ p0: String, _ p1: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/
    */
    public func options(_ p0: String, _ p1: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)") { request in 
            return try handler(request)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func get<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func post<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func put<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/
    */
    public func options<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func socket(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, WebSocket) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try request.upgradeToWebSocket { try handler(request, $0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func get(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func post(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func put(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func patch(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func delete(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/
    */
    public func options(_ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)") { request in 
            return try handler(request)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func socket(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, WebSocket) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try request.upgradeToWebSocket { try handler(request, $0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func get(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func post(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func put(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func patch(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func delete(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/<path>/
    */
    public func options(_ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            return try handler(request)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func socket<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func get<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func post<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func put<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func patch<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func delete<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/
    */
    public func options<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func socket(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest, WebSocket) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try request.upgradeToWebSocket { try handler(request, $0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func get(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func post(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func put(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func patch(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func delete(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try handler(request)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/<path>/<path>/
    */
    public func options(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ p4: String, handler: (HTTPRequest) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)/\(p3)/\(p4)") { request in 
            return try handler(request)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ p3: String, _ w0: W0.Type, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)/\(p3)/:w0") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)/:w0/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ p2: String, _ w0: W0.Type, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/\(p2)/:w0/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ p1: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/\(p1)/:w0/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func socket<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func get<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func post<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func put<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func patch<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func delete<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/<path>/
    */
    public func options<W0: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3) throws -> ()) {
        self.add(.get, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.get, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.post, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.put, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.patch, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.delete, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /<path>/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ p0: String, _ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.options, path: "\(p0)/:w0/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func socket<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, WebSocket, W0) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func get<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func post<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func put<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func patch<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func delete<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/<path>/
    */
    public func options<W0: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ p3: String, handler: (HTTPRequest, W0) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)/\(p2)/\(p3)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            return try handler(request,cw0)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ p2: String, _ w1: W1.Type, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)/\(p2)/:w1") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)/:w1/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ p1: String, _ w1: W1.Type, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/\(p1)/:w1/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3) throws -> ()) {
        self.add(.get, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/<path>/{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ p0: String, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/\(p0)/:w1/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, WebSocket, W0, W1) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ p2: String, handler: (HTTPRequest, W0, W1) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)/\(p1)/\(p2)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            return try handler(request,cw0, cw1)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ p1: String, _ w2: W2.Type, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)/\(p1)/:w2") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)/:w2/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3) throws -> ()) {
        self.add(.get, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/<path>/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ p0: String, _ w2: W2.Type, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/\(p0)/:w2/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, WebSocket, W0, W1, W2) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ p1: String, handler: (HTTPRequest, W0, W1, W2) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2/\(p0)/\(p1)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            return try handler(request,cw0, cw1, cw2)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/<path>/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ p0: String, _ w3: W3.Type, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2/\(p0)/:w3") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/<path>/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ p0: String, handler: (HTTPRequest, W0, W1, W2, W3) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2/:w3/\(p0)") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3)
        }
    }
    /**
       Establishes a WebSocket connection
       at the given path. WebSocket connections
       can be accessed using the `ws://` or `wss://`
       schemes to provide two way information
       transfer between the client and the server.
       **Body**
       The body closure is given access to the Request
       that started the connection as well as the WebSocket.
           app.socket("test") { request, ws in
       }
       **Sending Data**
       Data is sent to the WebSocket stream using `send(_:Data)`
           try ws.send("Hello, world")
       **Receiving Data**
       Data is received from the WebSocket using
       the `onText` callback.
       ws.onText = { ws, text in
           app.console.output("Received \(text)")
       }
       **Closing**
       Close the Socket when you are done.
           try ws.close()
       **Routing**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func socket<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, WebSocket, W0, W1, W2, W3, W4) throws -> ()) {
        self.add(.get, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try request.upgradeToWebSocket { try handler(request, $0,cw0, cw1, cw2, cw3, cw4) }
        }
    }
    /**
        This route will run for any GET request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func get<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, W0, W1, W2, W3, W4) throws -> ResponseRepresentable) {
        self.add(.get, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3, cw4)
        }
    }
    /**
        This route will run for any POST request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func post<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, W0, W1, W2, W3, W4) throws -> ResponseRepresentable) {
        self.add(.post, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3, cw4)
        }
    }
    /**
        This route will run for any PUT request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func put<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, W0, W1, W2, W3, W4) throws -> ResponseRepresentable) {
        self.add(.put, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3, cw4)
        }
    }
    /**
        This route will run for any PATCH request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func patch<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, W0, W1, W2, W3, W4) throws -> ResponseRepresentable) {
        self.add(.patch, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3, cw4)
        }
    }
    /**
        This route will run for any DELETE request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func delete<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, W0, W1, W2, W3, W4) throws -> ResponseRepresentable) {
        self.add(.delete, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3, cw4)
        }
    }
    /**
        This route will run for any OPTIONS request
        to a path that matches:
            /{wildcard}/{wildcard}/{wildcard}/{wildcard}/{wildcard}/
    */
    public func options<W0: StringInitializable, W1: StringInitializable, W2: StringInitializable, W3: StringInitializable, W4: StringInitializable>(_ w0: W0.Type, _ w1: W1.Type, _ w2: W2.Type, _ w3: W3.Type, _ w4: W4.Type, handler: (HTTPRequest, W0, W1, W2, W3, W4) throws -> ResponseRepresentable) {
        self.add(.options, path: ":w0/:w1/:w2/:w3/:w4") { request in 
            guard let vw0 = request.parameters["w0"] else {
                throw Abort.badRequest
            }
            guard let vw1 = request.parameters["w1"] else {
                throw Abort.badRequest
            }
            guard let vw2 = request.parameters["w2"] else {
                throw Abort.badRequest
            }
            guard let vw3 = request.parameters["w3"] else {
                throw Abort.badRequest
            }
            guard let vw4 = request.parameters["w4"] else {
                throw Abort.badRequest
            }
            let ew0 = try W0(from: vw0)
            let ew1 = try W1(from: vw1)
            let ew2 = try W2(from: vw2)
            let ew3 = try W3(from: vw3)
            let ew4 = try W4(from: vw4)
            guard let cw0 = ew0 else {
                throw Abort.invalidParameter("w0", W0.self)
            }
            guard let cw1 = ew1 else {
                throw Abort.invalidParameter("w1", W1.self)
            }
            guard let cw2 = ew2 else {
                throw Abort.invalidParameter("w2", W2.self)
            }
            guard let cw3 = ew3 else {
                throw Abort.invalidParameter("w3", W3.self)
            }
            guard let cw4 = ew4 else {
                throw Abort.invalidParameter("w4", W4.self)
            }
            return try handler(request,cw0, cw1, cw2, cw3, cw4)
        }
    }
}